/**
 * Panoptes - A Binary Translation Framework for CUDA
 * (c) 2011-2012 Chris Kennelly <chris@ckennelly.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <boost/scoped_array.hpp>
#include <boost/static_assert.hpp>
#include <cuda.h>
#include <cuda_runtime.h>
#include <gtest/gtest.h>
#include <stdint.h>
#include <valgrind/memcheck.h>
#include <cstdio>

/* Generated from: "__device__ int a, b, c;" */
static const unsigned long long fatbinData[] = {
    0x00100001ba55ed50,0x0000000000000a9d,0x0000004001000002,0x000000000000044c,
    0x0000000000000000,0x0000000a00010002,0x0000000600000038,0x0000000000000015,
    0x0000000000000000,0x000075632e6f6f66,0x33010102464c457f,0x0000000000000002,
    0x0000000100be0002,0x0000000000000000,0x00000000000003a4,0x0000000000000040,
    0x00380040000a010a,0x0001000700400003,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,0x0000000300000001,0x0000000000000000,
    0x0000000000000000,0x0000000000000200,0x0000000000000058,0x0000000000000000,
    0x0000000000000004,0x0000000000000000,0x000000030000000b,0x0000000000000000,
    0x0000000000000000,0x0000000000000258,0x0000000000000007,0x0000000000000000,
    0x0000000000000001,0x0000000000000000,0x0000000200000013,0x0000000000000000,
    0x0000000000000000,0x000000000000025f,0x0000000000000108,0x0000000800000002,
    0x0000000000000001,0x0000000000000018,0x0000000100000036,0x0000000000000002,
    0x0000000000000000,0x0000000000000367,0x000000000000000c,0x0000000000000000,
    0x0000000000000008,0x0000000000000000,0x0000000900000045,0x0000000000000000,
    0x0000000000000000,0x0000000000000373,0x0000000000000030,0x0000000400000003,
    0x0000000000000004,0x0000000000000010,0x000000080000002b,0x0000000000000003,
    0x0000000000000000,0x00000000000003a3,0x000000000000000c,0x0000000000000000,
    0x0000000000000004,0x0000000000000000,0x7472747368732e00,0x747274732e006261,
    0x746d79732e006261,0x672e766e2e006261,0x6e692e6c61626f6c,0x672e766e2e007469,
    0x6e2e006c61626f6c,0x6174736e6f632e76,0x65722e003431746e,0x6e6f632e766e2e6c,
    0x003431746e617473,0x0000610062006300,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000010003000000,0x0000000000000000,0x0000000000000000,
    0x0000020003000000,0x0000000000000000,0x0000000000000000,0x0000030003000000,
    0x0000000000000000,0x0000000000000000,0x0000000003000000,0x0000000000000000,
    0x0000000000000000,0x0000060003000000,0x0000000000000000,0x0000000000000000,
    0x0000040003000000,0x0000000000000000,0x0000000000000000,0x0000050003000000,
    0x0000000000000000,0x0100000000000000,0x0000060011000000,0x0400000000000000,
    0x0300000000000000,0x0400060011000000,0x0400000000000000,0x0500000000000000,
    0x0800060011000000,0x0400000000000000,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0a00000001000000,0x0000000004000000,0x0900000001000000,
    0x0000000008000000,0x0800000001000000,0x0000000600000000,0x000003a400000005,
    0x0000000000000000,0x0000000000000000,0x000000a800000000,0x000000a800000000,
    0x0000000400000000,0x0000000100000000,0x0000036700000005,0x0000000000000000,
    0x0000000000000000,0x0000003c00000000,0x0000003c00000000,0x0000000400000000,
    0x0000000100000000,0x000003a300000006,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000c00000000,0x0000000400000000,0x0100000100000000,
    0x000005c900000048,0x0000000000000000,0x0001000400000038,0x000000400000000a,
    0x0000001500000006,0x0000000000000000,0x0000000000000000,0x2e6f6f6600000000,
    0x65762e0900007563,0x2e31206e6f697372,0x65677261742e0a34,0x2c30315f6d732074,
    0x3436665f70616d20,0x0a3233665f6f745f,0x090a090a0a0a090a,0x090a090a090a0a0a,
    0x090a090a090a090a,0x09656c69662e0a0a,0x6d6d6f633c220931,0x656e696c2d646e61,
    0x656c69662e0a223e,0x2e6f6f6622093209,0x2e32656661647563,0x69662e0a22757067,
    0x752f22093309656c,0x672f62696c2f7273,0x365f3638782f6363,0x6e696c2d63702d34,
    0x342f756e672d7875,0x636e692f332e352e,0x6474732f6564756c,0x2e0a22682e666564,
    0x22093409656c6966,0x6475632f74706f2f,0x2e2e2f6e69622f61,0x6564756c636e692f,
    0x7665642f7472632f,0x746e75725f656369,0x2e0a22682e656d69,0x22093509656c6966,
    0x6475632f74706f2f,0x2e2e2f6e69622f61,0x6564756c636e692f,0x65645f74736f682f,
    0x22682e73656e6966,0x3609656c69662e0a,0x632f74706f2f2209,0x2f6e69622f616475,
    0x756c636e692f2e2e,0x746c6975622f6564,0x73657079745f6e69,0x6c69662e0a22682e,
    0x706f2f2209370965,0x622f616475632f74,0x6e692f2e2e2f6e69,0x65642f6564756c63,
    0x7079745f65636976,0x662e0a22682e7365,0x2f22093809656c69,0x616475632f74706f,
    0x2f2e2e2f6e69622f,0x2f6564756c636e69,0x745f726576697264,0x0a22682e73657079,
    0x093909656c69662e,0x75632f74706f2f22,0x2e2f6e69622f6164,0x64756c636e692f2e,
    0x6361667275732f65,0x2e73657079745f65,0x656c69662e0a2268,0x706f2f2209303109,
    0x622f616475632f74,0x6e692f2e2e2f6e69,0x65742f6564756c63,0x79745f6572757478,
    0x2e0a22682e736570,0x09313109656c6966,0x75632f74706f2f22,0x2e2f6e69622f6164,
    0x64756c636e692f2e,0x726f746365762f65,0x682e73657079745f,0x09656c69662e0a22,
    0x74706f2f22093231,0x69622f616475632f,0x636e692f2e2e2f6e,0x7665642f6564756c,
    0x6e75616c5f656369,0x6d617261705f6863,0x22682e7372657465,0x3109656c69662e0a,
    0x2f74706f2f220933,0x6e69622f61647563,0x6c636e692f2e2e2f,0x2f7472632f656475,
    0x5f656761726f7473,0x22682e7373616c63,0x3109656c69662e0a,0x632e6f6f66220934,
    0x656c69662e0a2275,0x706f2f2209353109,0x622f616475632f74,0x6e692f2e2e2f6e69,
    0x6f632f6564756c63,0x6e75665f6e6f6d6d,0x682e736e6f697463,0x09656c69662e0a22,
    0x74706f2f22093631,0x69622f616475632f,0x636e692f2e2e2f6e,0x74616d2f6564756c,
    0x6974636e75665f68,0x2e0a22682e736e6f,0x09373109656c6966,0x75632f74706f2f22,
    0x2e2f6e69622f6164,0x64756c636e692f2e,0x635f6874616d2f65,0x73746e6174736e6f,
    0x6c69662e0a22682e,0x6f2f220938310965,0x2f616475632f7470,0x692f2e2e2f6e6962,
    0x642f6564756c636e,0x75665f6563697665,0x2e736e6f6974636e,0x656c69662e0a2268,
    0x706f2f2209393109,0x622f616475632f74,0x6e692f2e2e2f6e69,0x6d732f6564756c63,
    0x6d6f74615f31315f,0x74636e75665f6369,0x0a22682e736e6f69,0x303209656c69662e,
    0x632f74706f2f2209,0x2f6e69622f616475,0x756c636e692f2e2e,0x32315f6d732f6564,
    0x5f63696d6f74615f,0x6e6f6974636e7566,0x69662e0a22682e73,0x2f2209313209656c,
    0x616475632f74706f,0x2f2e2e2f6e69622f,0x2f6564756c636e69,0x6f645f33315f6d73,
    0x6e75665f656c6275,0x682e736e6f697463,0x09656c69662e0a22,0x74706f2f22093232,
    0x69622f616475632f,0x636e692f2e2e2f6e,0x5f6d732f6564756c,0x696d6f74615f3032,
    0x6974636e75665f63,0x2e0a22682e736e6f,0x09333209656c6966,0x75632f74706f2f22,
    0x2e2f6e69622f6164,0x64756c636e692f2e,0x5f30325f6d732f65,0x69736e6972746e69,
    0x662e0a22682e7363,0x2209343209656c69,0x6475632f74706f2f,0x2e2e2f6e69622f61,
    0x6564756c636e692f,0x656361667275732f,0x6f6974636e75665f,0x662e0a22682e736e,
    0x2209353209656c69,0x6475632f74706f2f,0x2e2e2f6e69622f61,0x6564756c636e692f,
    0x657275747865742f,0x665f68637465665f,0x736e6f6974636e75,0x6c69662e0a22682e,
    0x6f2f220936320965,0x2f616475632f7470,0x692f2e2e2f6e6962,0x6d2f6564756c636e,
    0x636e75665f687461,0x62645f736e6f6974,0x682e317874705f6c,0x626f6c672e0a0a22,
    0x203233732e206c61,0x626f6c672e0a3b61,0x203233732e206c61,0x626f6c672e0a3b62,
    0x203233732e206c61,0x000000000a0a3b63};

static const struct { int m; int v; const unsigned long long* d; char* f;}
__fatDeviceText __attribute__ ((aligned (8))) = { 0x466243b1, 1, fatbinData, 0 };

/*
 * Since this isn't exposed normally (by use of preprocessor directives in
 * crt/host_runtime.h), we need to provide declarations.
 */
extern "C" {

extern void** __cudaRegisterFatBinary(void *fatCubin);

extern void __cudaRegisterVar(void **fatCubinHandle, char *hostVar,
    char *deviceAddress, const char *deviceName, int ext, int size,
    int constant, int global);

}

static void **__cudaFatCubinHandle;

int a, b, c;

TEST(RegisterVarDeathTest, RegisterFromNullHandle) {
    ::testing::FLAGS_gtest_death_test_style = "threadsafe";

    EXPECT_EXIT(
        __cudaRegisterVar(NULL, (char*)&a,
        (char*)"a", "a", 0, 4, 0, 0),
        ::testing::KilledBySignal(SIGSEGV), "");
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);

    __cudaFatCubinHandle = __cudaRegisterFatBinary((void *)&__fatDeviceText);
    return RUN_ALL_TESTS();
}
