FIND_PACKAGE(GTest REQUIRED)
INCLUDE_DIRECTORIES("${GTEST_INCLUDE_DIRS}")

SET(CUDA_PROPAGATE_HOST_FLAGS off)

SET(VALGRIND_SUPPRESSIONS "${CMAKE_CURRENT_SOURCE_DIR}/valgrind.suppressions")

INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}")

FUNCTION(EXPAND_TESTS SOURCES)
    FOREACH(TEST_SOURCE ${SOURCES})
        STRING(REGEX MATCH "\\.cu$" SUFFIX "${TEST_SOURCE}")
        STRING(REGEX REPLACE "\\.(cpp|cu)$" "" EXECUTABLE "${TEST_SOURCE}")
        IF("${SUFFIX}" STREQUAL ".cu")
            CUDA_ADD_EXECUTABLE("${EXECUTABLE}" "${TEST_SOURCE}")
        ELSE()
            ADD_EXECUTABLE("${EXECUTABLE}" "${TEST_SOURCE}")
            TARGET_LINK_LIBRARIES("${EXECUTABLE}" ${CUDA_LIBRARIES})
        ENDIF()

        TARGET_LINK_LIBRARIES("${EXECUTABLE}" boost_thread gtest pthread)
        ADD_TEST(NAME "CONTROL_${EXECUTABLE}" COMMAND $<TARGET_FILE:${EXECUTABLE}>)
        ADD_TEST(NAME "RUNNER_${EXECUTABLE}" COMMAND "$<TARGET_FILE:panoptes_launcher>" --library=$<TARGET_FILE:panoptes> $<TARGET_FILE:${EXECUTABLE}>)

        STRING(SUBSTRING "${TEST_SOURCE}" 0 6 TEST_TYPE)
        IF("${TEST_TYPE}" STREQUAL "vtest_")
            ADD_TEST(NAME "VRUNNER_${EXECUTABLE}" COMMAND "$<TARGET_FILE:panoptes_launcher>" --library=$<TARGET_FILE:panoptes> -- valgrind --error-exitcode=1 --leak-check=full --suppressions=${VALGRIND_SUPPRESSIONS} $<TARGET_FILE:${EXECUTABLE}>)
        ENDIF()
    ENDFOREACH(TEST_SOURCE)
ENDFUNCTION(EXPAND_TESTS)

ADD_SUBDIRECTORY(sm_10)
ADD_SUBDIRECTORY(sm_12)
ADD_SUBDIRECTORY(sm_11)
ADD_SUBDIRECTORY(sm_13)
ADD_SUBDIRECTORY(sm_20)
ADD_SUBDIRECTORY(generic)

# I/O-related tests
ADD_SUBDIRECTORY(ptx_io)
